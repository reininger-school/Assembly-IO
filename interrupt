#MIPS program for single digit adder with memory mapped I/O and interupt
.globl main
.data
	expBuffer: .space 60 #reserve space for expression
	expBufferLen: .word 0 #length of expression in bytes
	#I/O addresses
	RC: .word 0xFFFF0000
	RD: .word 0xFFFF0004
	TC: .word 0xFFFF0008
	TD: .word 0xFFFF000C

.text
main:
	#turn on transmitter ready bit
	jal transmitterOn	
	#turn on receiver controls interupt
	jal receiverInteruptOn
	
	#loop that does nothing
	Loop6:
		addi $s0, $s0, 1
		addi $s0, $s0, -1
		j Loop6
				
	#terminate
	j terminate	

########################################
#functions
########################################
			
#turns on TC's ready bit
#no args, no return, no calls
transmitterOn:
	lw $t0, TC #$t0 contains TC addr
	lw $t1, 0($t0) #t1 contains TC
	ori $t2, $t1, 1 #t2 contains TC with ready enabled
	sw $t2, 0($t0) #store new TC
	jr $ra

#turns on RC's interupt enable bit
#no args, no return, no calls
receiverInteruptOn:
	lw $t0, RC
	lw $t1, 0($t0)
	ori $t2, $t1, 2
	sw $t2, 0($t0)
	jr $ra
	
#polls RC for input
#no args, does return $v0, no calls
pollRC:
	lw $t0, RC #$t0 contains RC addr
	Loop:
		lw $t1, 0($t0) #$t1 contains RC 
		andi $t2, $t1, 0x0001 #$t2 contains RC ready bit
		beq $t2, $zero, Loop #continue polling if not ready
	lw $v0, 4($t0) #load reciever data into $v0
	jr $ra
	
#returns value of expression as integer in $v0
#no args, does return $v0, calls
calculateResult:
#convention:
#$s1 = firstnum
#s2 = secondnum
#s3 = addr of exp
#$s4 = result

	#store regs
	addi $sp, $sp, -20
	sw $ra, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	
	#calculate result
	la $s3, expBuffer #$s3 contains address of expBuffer
	lw $a0, 0($s3) #$a0 contains char value of firstnum in exp
	jal char2num #$v0 contains number value of firstnum
	move $s1, $v0 #$s1 contains number value of firstnum
	lw $a0, 8($s3) #$a0 contains char value of secondnum
	jal char2num #$v0 contains number value of secondnum
	move $s2, $v0 #$s2 contains number value of secondnum
	add $s4, $s1, $s2 #s4 contains number value of sum of firstnum and secondnum
	
	#if2 - handling 1 or 2 digit result converting result to chars to place in expBuffer
	ble $s4, 9, else2
	#if 2 digits
	addi $s4, $s4, -10
	move $a0, $s4
	jal num2char
	sw $v0, 20($s3)
	li $s0, 49
	sw $s0, 16($s3)
	j exit2
	
	else2:
	#if 1 digit
	move $a0, $s4
	jal num2char
	sw $v0, 16($s3)
	exit2:
	
	
	#recover regs
	lw $s4, 16($sp)
	lw $s3, 12($sp)
	lw $s2, 8($sp)
	lw $s1, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	
	jr $ra
	
#kills the program
#no args, no return, no calls
terminate:
	li $v0, 10
	syscall
	
#interupt handler code
#no args, no return, calls
myHandCode:
	#save regs
	addi $sp, $sp, -16
	sw $ra, 0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $a0, 12($sp)
	
	#retrive, print, and store char in expression buffer
	jal pollRC #char is in $v0
	move $a0, $v0 #char is in $a0
	jal pollPrint #char is printed to screen
	lw $s0, expBufferLen #$s0 holds current length of expression(in bytes)
	la $s1, expBuffer #$s1 contains address of expBuffer
	add $s1, $s1, $s0 #$s1 contains address of where char needs to be writtern
	sw $v0, 0($s1) #char stored in expBuffer
	#increment buffer len
	addi $s0, $s0, 4 #$s0 contains new buffer length
	sw $s0, expBufferLen #new buffer length saved
	
	#if equal sign evaluate and print to screen
	bne $s0, 16, exit7
	#calculate result
	jal calculateResult
	#print to screen by polling
	jal printExp	
	
	exit7:
	#recover regs
	lw $a0, 12($sp)
	lw $s1, 8($sp)
	lw $s0, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 16
	
	jr $ra	
	
#prints char to screen
#takes word with char as argument $a0, no return, no calls
pollPrint:
	lui $t0, 0xFFFF #$t0 has tc addr
	Loop3:
		lw $t1, 8($t0) #$t1 holds TC
		andi $t2, $t1, 0x0001 #$t2 hold TC ready bit
		beq $t2, $zero, Loop3 #keep polling if ready is 0
		sw $a0, 12($t0) #store char to be written
	jr $ra
	
#prints result of expression to screen
#no args, no return, calls
printExp:
	#save to stack
	addi $sp, $sp, -16
	sw $ra, 0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $s2, 12($sp)
	
	#poll for 2 chars
	li $s0, 4 #set counter to 0
	li $s1, 6 #set n
	la $s2, expBuffer #lw addr
	addi $s2, $s2, 16
	Loop5:
		bge $s0, $s1, Exit5
		addi $s0, $s0, 1
		lw $a0, 0($s2)
		jal pollPrint
		addi $s2, $s2, 4
		j Loop5
	Exit5:
	
	#recover stack
	lw $s2, 12($sp)
	lw $s1, 8($sp)
	lw $s0, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 16
		
	jr $ra

#converts from ascii to integer value
#takes $a0 as char to convert, returns integer value in $v0, no calls
char2num:
	li $t0, 48
	subu $v0, $a0, $t0
	jr $ra
	
#converts from integer to ascii value
#takes $a0 as integer to convert, returns ascii value in $v0, no calls
num2char:
	li $t0, 48
	addu $v0, $a0, $t0
	jr $ra
	
############################################
#interupt code
############################################
.ktext 0x80000180
	#save all regs (like normal call)
	la $k1, kSave
	sw $s0, 0($k1)
	sw $s1, 4($k1)
	sw $s2, 8($k1)
	sw $s3, 12($k1)
	sw $s4, 16($k1)
	sw $t0, 20($k1)
	sw $t1, 24($k1)
	sw $t2, 28($k1)
	sw $t3, 32($k1)
	sw $at, 36($k1)
	sw $ra, 40($k1)
	sw $a0, 44($k1)
	sw $v0, 48($k1)
	
	#check casue registers exception code (goto apple if fail)
		#check bits 6-2 = 0
		andi $s1, $13, 124
		bnez $s1, apple
	
	#code would not with this check so it is disabled
	#check casue registers interrupt level bit (goto apple if fail
		#andi $s1, $13, 256
		#beqz $s1, apple	
	
	#IntHand code
		la $k0, myHandCode
		jalr $k0
	
	#clear cause register
		andi $13, $13, 0 #set cause reg to all zeroes
		
	#reset status register
		ori $13, $13, 1 # turn on interupt enable
		

	apple:
	#recover regs
	lw $s0, 0($k1)
	lw $s1, 4($k1)
	lw $s2, 8($k1)
	lw $s3, 12($k1)
	lw $s4, 16($k1)
	lw $t0, 20($k1)
	lw $t1, 24($k1)
	lw $t2, 28($k1)
	lw $t3, 32($k1)
	lw $at, 36($k1)
	lw $ra, 40($k1)
	lw $a0, 44($k1)
	lw $v0, 48($k1)
	
	eret
	
.kdata
	#saved regs
	kSave: .space 60